@page "/Test"
@implements IDisposable
@using tester.Data.Services
@inject SessionDataService _sessionData
@inject NavigationManager _navManager
@inject TestsDbService _testDbService;
@inject TestSessionsService _testSessionsService;
@inject HttpClient _httpClient;

@if (!_sessionData.IsTestActive)
{
    _navManager.NavigateTo("/");
}
else
{
    <h3 class="title">Вопрос @_sessionData.QuestionIndex</h3>
    <div>
        @QuestionFragment
    </div>
    for(var index = 0; index < _sessionData.UserTest.Questions.Count; index++)
    {
        var i = index;
        <button class="button @(i == _sessionData.QuestionIndex ? "is-primary" : "is-success") mt-1 mr-1 mb-1" 
                style="width: fit-content" @onclick="@(() => ChooseQuestion(Convert.ToUInt16(i)))">
            <span>@(i+1)</span>
        </button>
    }
    <div class="button is-warning mt-3" @onclick="Finish">
        Завершить
    </div>
}

@code {

    private static readonly Random Random = new();

    private readonly Session _session = new();
    
    private RenderFragment QuestionFragment { get; set; }
    
    protected override void OnParametersSet()
    {
        if(!_sessionData.IsTestActive) _navManager.NavigateTo("404");
        
        if (_httpClient.BaseAddress is not null) _session.IpAddress = _httpClient.BaseAddress.Authority;
        _session.NameSurname = _sessionData.NameSurname;
        _session.QuestionIndex = 0;
        _session.TestName = _sessionData.UserTest.Name;

        foreach (var questions in _sessionData.UserTest.Questions)
        {
            var index = Random.Next(0, questions.Count);
            _sessionData.ChosenQuestionIndices.Add(Convert.ToUInt32(index));
            _sessionData.ChosenQuestions.Add(questions[index]);
        }

        foreach (var question in _sessionData.ChosenQuestions)
        {
            _sessionData.AnswersData.Add(Activator.CreateInstance(question.GetAnswersDataType()));
        }
        
        QuestionFragment = ShowDynamicComponent();

        _testSessionsService.Sessions.Add(_session);
        
        base.OnParametersSet();
    }

    private void ChooseQuestion(ushort i)
    {
        _sessionData.QuestionIndex = i;
        ShowDynamicComponent();
    }

    private void Finish()
    {
        _navManager.NavigateTo("/Results");
    }

    private void NextQuestion(bool success)
    {
        /*if (success) _sessionData.CorrectAnswers += 1;
        _sessionData.QuestionIndex += 1;
        _session.QuestionIndex = _sessionData.QuestionIndex;
        if (_sessionData.UserTest.Questions.Count <= _sessionData.QuestionIndex)
        {
            _navManager.NavigateTo("/Results");
            return;
        }
        QuestionFragment = ShowDynamicComponent();*/
    }
    
    private RenderFragment ShowDynamicComponent() => builder =>
    {
        if (_sessionData.UserTest.Questions.Count <= _sessionData.QuestionIndex)
        {
            return;
        }
        //об EventCallback.Factory написано здесь https://stackoverflow.com/questions/59816177/set-eventcallbackstring-outside-of-a-blazor-componet
        builder.OpenComponent(0, _sessionData.ChosenQuestions[_sessionData.QuestionIndex].GetViewType());
        builder.AddAttribute(1, "Model", _sessionData.UserTest.Questions[_sessionData.QuestionIndex][Convert.ToInt32(_sessionData.ChosenQuestionIndices[_sessionData.QuestionIndex])]);
        builder.AddAttribute(2, "AnswersModel", _sessionData.AnswersData[_sessionData.QuestionIndex]);
        builder.AddAttribute(3, "OnContinue", EventCallback.Factory.Create(this, (bool x) => NextQuestion(x)));
        builder.CloseComponent();
        //комментарии к подобному коду находятся в QuestionCreator.razor
    };

    public void Dispose()
    {
        _httpClient?.Dispose();
        _testSessionsService.Sessions.Remove(_session);
    }

}
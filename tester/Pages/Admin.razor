@page "/Admin"
@using tester.Data.Services
@inherits AdministatorPage
@inject CircuitHandlerService _circuitHandlerService
@inject TestSessionsService _testSessionsService;
@inject UsersHistoryService _history;
<nav class="breadcrumb is-large mb-1" aria-label="breadcrumbs">
  <ul>
    <li  class="is-active" aria-current="page"><a href="Admin">Администратирование</a></li>
    <li><a href="Tests">Тесты</a></li>
    <li><a href="CreateTest">Новый тест</a></li>
    <li><a href="User">Войти как пользователь</a></li>
  </ul>
</nav>
<h3 class="subtitle">Доступ на страницы администратирования предоставляется только с localhost/127.0.0.1</h3>
<hr/>
<table class="table is-light">
  <thead>
  <tr>
    <th>Имя пользователя</th>
    <th>Имя теста</th>
    <th>Время начала</th>
    <th>Время окончания</th>
    <th>Баллов</th>
    <th>%</th>
    <th></th>
  </tr>
  </thead>
  <tbody>
  @foreach(var record in _history.History)
  {
    <tr>
      <td>@record.Username</td>
      <td>@record.Testname</td>
      <td>@record.StartTime</td>
      <td>@record.EndTime</td>
      <td>@record.Score/@record.MaxScore</td>
      <td>@(record.Score/record.MaxScore)</td>
      <td>Просмотреть</td>
    </tr>
  }
  </tbody>
</table>
<button class="button is-success">Сохранить</button>
<button class="button is-success">Сохранить как .xlsx</button>
<table class="table is-light mt-5">
  <thead>
  <tr>
    <th>№</th>
    <th>ФИО</th>
    <th>IP</th>
    <th>Имя теста</th>
    <th>Номер вопроса</th>
  </tr>
  </thead>
  <tbody>
  @for (var index = 0; index < _testSessionsService.Sessions.Count; index++)
  {
    var i = index;
    var item = _testSessionsService.Sessions[index];
    <tr>
      <td>@i</td>
      <td>@item.NameSurname</td>
      <td>@item.IpAddress</td>
      <td>@item.TestName</td>
      <td>@item.QuestionIndex</td>
    </tr>
  }
  </tbody>
</table>




@code {
  protected override Task OnParametersSetAsync()
  {
    _history.History.CollectionChanged += (_,_) => InvokeAsync(StateHasChanged);
    _testSessionsService.Sessions.CollectionChanged += (_, _) => InvokeAsync(StateHasChanged);
    return base.OnParametersSetAsync();
  }

  private void SaveXlsx()
  {
    
  }

  private void Save()
  {
    
  }

}